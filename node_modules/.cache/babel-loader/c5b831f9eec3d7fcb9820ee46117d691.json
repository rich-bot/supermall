{"remainingRequest":"F:\\project\\vue\\supermall\\node_modules\\babel-loader\\lib\\index.js!F:\\project\\vue\\supermall\\src\\network\\axios.js","dependencies":[{"path":"F:\\project\\vue\\supermall\\src\\network\\axios.js","mtime":1596946096230},{"path":"F:\\project\\vue\\supermall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1596725900621},{"path":"F:\\project\\vue\\supermall\\node_modules\\babel-loader\\lib\\index.js","mtime":1596725931667}],"contextDependencies":[],"result":["import axios from 'axios';\nexport default function request(config) {\n  var instance = axios.create({\n    baseURL: 'http://152.136.185.210:8000/api/z8',\n    timeout: 5000\n  }); //请求拦截器\n\n  instance.interceptors.request.use(function (config) {\n    return config;\n  }, function (err) {\n    console.log(err);\n  }); //响应拦截器\n\n  instance.interceptors.response.use(function (res) {\n    return res.data;\n  }, function (err) {\n    console.log(err);\n  });\n  return instance(config);\n}",{"version":3,"sources":["F:\\project\\vue\\supermall\\src\\network\\axios.js"],"names":["axios","request","config","instance","create","baseURL","timeout","interceptors","use","err","console","log","response","res","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvC,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC7BC,IAAAA,OAAO,EAAE,oCADoB;AAE7BC,IAAAA,OAAO,EAAE;AAFoB,GAAb,CAAjB,CADuC,CAMvC;;AACAH,EAAAA,QAAQ,CAACI,YAAT,CAAsBN,OAAtB,CAA8BO,GAA9B,CAAkC,UAAAN,MAAM,EAAI;AAC1C,WAAOA,MAAP;AACA,GAFF,EAGC,UAAAO,GAAG,EAAI;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,GALF,EAPuC,CAcvC;;AACAN,EAAAA,QAAQ,CAACI,YAAT,CAAsBK,QAAtB,CAA+BJ,GAA/B,CAAmC,UAAAK,GAAG,EAAE;AACvC,WAAOA,GAAG,CAACC,IAAX;AACA,GAFD,EAEE,UAAAL,GAAG,EAAE;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,GAJD;AAKA,SAAON,QAAQ,CAACD,MAAD,CAAf;AACA","sourcesContent":["import axios from 'axios'\r\nexport default function request(config) {\r\n\tconst instance = axios.create({\r\n\t\tbaseURL: 'http://152.136.185.210:8000/api/z8',\r\n\t\ttimeout: 5000\r\n\r\n\t})\r\n\t//请求拦截器\r\n\tinstance.interceptors.request.use(config => {\r\n\t\t\treturn config\r\n\t\t},\r\n\t\terr => {\r\n\t\t\tconsole.log(err);\r\n\t\t}\r\n\t)\r\n\t//响应拦截器\r\n\tinstance.interceptors.response.use(res=>{\r\n\t\treturn res.data;\r\n\t},err=>{\r\n\t\tconsole.log(err);\r\n\t})\r\n\treturn instance(config);\r\n}\n"]}]}